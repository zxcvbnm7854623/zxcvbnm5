{"mappings":"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","sources":["<anon>","index.js","node_modules/date-fns/formatDistanceToNow.js","node_modules/date-fns/constructNow.js","node_modules/date-fns/constructFrom.js","node_modules/date-fns/constants.js","node_modules/date-fns/formatDistance.js","node_modules/date-fns/locale/en-US.js","node_modules/date-fns/locale/en-US/_lib/formatDistance.js","node_modules/date-fns/locale/en-US/_lib/formatLong.js","node_modules/date-fns/locale/_lib/buildFormatLongFn.js","node_modules/date-fns/locale/en-US/_lib/formatRelative.js","node_modules/date-fns/locale/en-US/_lib/localize.js","node_modules/date-fns/locale/_lib/buildLocalizeFn.js","node_modules/date-fns/locale/en-US/_lib/match.js","node_modules/date-fns/locale/_lib/buildMatchFn.js","node_modules/date-fns/locale/_lib/buildMatchPatternFn.js","node_modules/date-fns/_lib/defaultOptions.js","node_modules/date-fns/_lib/getTimezoneOffsetInMilliseconds.js","node_modules/date-fns/toDate.js","node_modules/date-fns/_lib/normalizeDates.js","node_modules/date-fns/compareAsc.js","node_modules/date-fns/differenceInMonths.js","node_modules/date-fns/differenceInCalendarMonths.js","node_modules/date-fns/isLastDayOfMonth.js","node_modules/date-fns/endOfDay.js","node_modules/date-fns/endOfMonth.js","node_modules/date-fns/differenceInSeconds.js","node_modules/date-fns/_lib/getRoundingMethod.js","node_modules/date-fns/differenceInMilliseconds.js"],"sourcesContent":["/**\n * @module constants\n * @summary Useful constants\n * @description\n * Collection of useful date constants.\n *\n * The constants could be imported from `date-fns/constants`:\n *\n * ```ts\n * import { maxTime, minTime } from \"./constants/date-fns/constants\";\n *\n * function isAllowedTime(time) {\n *   return time <= maxTime && time >= minTime;\n * }\n * ```\n */ /**\n * @constant\n * @name daysInWeek\n * @summary Days in 1 week.\n */ const $8540a44f59a4af84$export$dfd9b671c89acc8e = 7;\nconst $8540a44f59a4af84$export$3913210603d8e9ae = 365.2425;\nconst $8540a44f59a4af84$export$81caae6e1cc7a622 = Math.pow(10, 8) * 86400000;\nconst $8540a44f59a4af84$export$4dec998e48f9c246 = -$8540a44f59a4af84$export$81caae6e1cc7a622;\nconst $8540a44f59a4af84$export$4fad13613e88edc8 = 604800000;\nconst $8540a44f59a4af84$export$b76b1809a2898f9a = 86400000;\nconst $8540a44f59a4af84$export$91246f0b9bd9beff = 60000;\nconst $8540a44f59a4af84$export$7f72910d6dfd237a = 3600000;\nconst $8540a44f59a4af84$export$397c2d5776aa9055 = 1000;\nconst $8540a44f59a4af84$export$3633035e63cee86a = 525600;\nconst $8540a44f59a4af84$export$ab7da2ccd1075c38 = 43200;\nconst $8540a44f59a4af84$export$2423174df8cd3cd2 = 1440;\nconst $8540a44f59a4af84$export$f2f5ae5a8e2d8f9f = 60;\nconst $8540a44f59a4af84$export$3c58128db900d44e = 3;\nconst $8540a44f59a4af84$export$80d7e435f744f319 = 12;\nconst $8540a44f59a4af84$export$4db7641526e3241f = 4;\nconst $8540a44f59a4af84$export$698aec755e92c695 = 3600;\nconst $8540a44f59a4af84$export$a77c1a7ebebe2a5a = 60;\nconst $8540a44f59a4af84$export$815a9362476d2fe3 = $8540a44f59a4af84$export$698aec755e92c695 * 24;\nconst $8540a44f59a4af84$export$34804a017b31e2fe = $8540a44f59a4af84$export$815a9362476d2fe3 * 7;\nconst $8540a44f59a4af84$export$7271e9e3478110d1 = $8540a44f59a4af84$export$815a9362476d2fe3 * $8540a44f59a4af84$export$3913210603d8e9ae;\nconst $8540a44f59a4af84$export$8e6600bbdee7dabb = $8540a44f59a4af84$export$7271e9e3478110d1 / 12;\nconst $8540a44f59a4af84$export$be1dccf2de902d31 = $8540a44f59a4af84$export$8e6600bbdee7dabb * 3;\nconst $8540a44f59a4af84$export$2a7b97929c48d47d = Symbol.for(\"constructDateFrom\");\n\n\nfunction $abb9adbdb26342b3$export$ead8a1812b171991(date, value) {\n    if (typeof date === \"function\") return date(value);\n    if (date && typeof date === \"object\" && (0, $8540a44f59a4af84$export$2a7b97929c48d47d) in date) return date[0, $8540a44f59a4af84$export$2a7b97929c48d47d](value);\n    if (date instanceof Date) return new date.constructor(value);\n    return new Date(value);\n}\nvar // Fallback for modularized imports:\n$abb9adbdb26342b3$export$2e2bcd8739ae039 = $abb9adbdb26342b3$export$ead8a1812b171991;\n\n\nfunction $d8623e255497753b$export$18c3c6510fb97afc(date) {\n    return (0, $abb9adbdb26342b3$export$ead8a1812b171991)(date, Date.now());\n}\nvar // Fallback for modularized imports:\n$d8623e255497753b$export$2e2bcd8739ae039 = $d8623e255497753b$export$18c3c6510fb97afc;\n\n\nconst $0bc92389da5ca8f2$var$formatDistanceLocale = {\n    lessThanXSeconds: {\n        one: \"less than a second\",\n        other: \"less than {{count}} seconds\"\n    },\n    xSeconds: {\n        one: \"1 second\",\n        other: \"{{count}} seconds\"\n    },\n    halfAMinute: \"half a minute\",\n    lessThanXMinutes: {\n        one: \"less than a minute\",\n        other: \"less than {{count}} minutes\"\n    },\n    xMinutes: {\n        one: \"1 minute\",\n        other: \"{{count}} minutes\"\n    },\n    aboutXHours: {\n        one: \"about 1 hour\",\n        other: \"about {{count}} hours\"\n    },\n    xHours: {\n        one: \"1 hour\",\n        other: \"{{count}} hours\"\n    },\n    xDays: {\n        one: \"1 day\",\n        other: \"{{count}} days\"\n    },\n    aboutXWeeks: {\n        one: \"about 1 week\",\n        other: \"about {{count}} weeks\"\n    },\n    xWeeks: {\n        one: \"1 week\",\n        other: \"{{count}} weeks\"\n    },\n    aboutXMonths: {\n        one: \"about 1 month\",\n        other: \"about {{count}} months\"\n    },\n    xMonths: {\n        one: \"1 month\",\n        other: \"{{count}} months\"\n    },\n    aboutXYears: {\n        one: \"about 1 year\",\n        other: \"about {{count}} years\"\n    },\n    xYears: {\n        one: \"1 year\",\n        other: \"{{count}} years\"\n    },\n    overXYears: {\n        one: \"over 1 year\",\n        other: \"over {{count}} years\"\n    },\n    almostXYears: {\n        one: \"almost 1 year\",\n        other: \"almost {{count}} years\"\n    }\n};\nconst $0bc92389da5ca8f2$export$2c14ff85d6318973 = (token, count, options)=>{\n    let result;\n    const tokenValue = $0bc92389da5ca8f2$var$formatDistanceLocale[token];\n    if (typeof tokenValue === \"string\") result = tokenValue;\n    else if (count === 1) result = tokenValue.one;\n    else result = tokenValue.other.replace(\"{{count}}\", count.toString());\n    if (options?.addSuffix) {\n        if (options.comparison && options.comparison > 0) return \"in \" + result;\n        else return result + \" ago\";\n    }\n    return result;\n};\n\n\nfunction $46af55383084911e$export$38e44e97ce4dbb7d(args) {\n    return (options = {})=>{\n        // TODO: Remove String()\n        const width = options.width ? String(options.width) : args.defaultWidth;\n        const format = args.formats[width] || args.formats[args.defaultWidth];\n        return format;\n    };\n}\n\n\nconst $63c01f9040a729a9$var$dateFormats = {\n    full: \"EEEE, MMMM do, y\",\n    long: \"MMMM do, y\",\n    medium: \"MMM d, y\",\n    short: \"MM/dd/yyyy\"\n};\nconst $63c01f9040a729a9$var$timeFormats = {\n    full: \"h:mm:ss a zzzz\",\n    long: \"h:mm:ss a z\",\n    medium: \"h:mm:ss a\",\n    short: \"h:mm a\"\n};\nconst $63c01f9040a729a9$var$dateTimeFormats = {\n    full: \"{{date}} 'at' {{time}}\",\n    long: \"{{date}} 'at' {{time}}\",\n    medium: \"{{date}}, {{time}}\",\n    short: \"{{date}}, {{time}}\"\n};\nconst $63c01f9040a729a9$export$cbf60ecb96cbb82f = {\n    date: (0, $46af55383084911e$export$38e44e97ce4dbb7d)({\n        formats: $63c01f9040a729a9$var$dateFormats,\n        defaultWidth: \"full\"\n    }),\n    time: (0, $46af55383084911e$export$38e44e97ce4dbb7d)({\n        formats: $63c01f9040a729a9$var$timeFormats,\n        defaultWidth: \"full\"\n    }),\n    dateTime: (0, $46af55383084911e$export$38e44e97ce4dbb7d)({\n        formats: $63c01f9040a729a9$var$dateTimeFormats,\n        defaultWidth: \"full\"\n    })\n};\n\n\nconst $f529b3bee3f6d835$var$formatRelativeLocale = {\n    lastWeek: \"'last' eeee 'at' p\",\n    yesterday: \"'yesterday at' p\",\n    today: \"'today at' p\",\n    tomorrow: \"'tomorrow at' p\",\n    nextWeek: \"eeee 'at' p\",\n    other: \"P\"\n};\nconst $f529b3bee3f6d835$export$8fbbfd65594f46a0 = (token, _date, _baseDate, _options)=>$f529b3bee3f6d835$var$formatRelativeLocale[token];\n\n\n/**\n * The localize function argument callback which allows to convert raw value to\n * the actual type.\n *\n * @param value - The value to convert\n *\n * @returns The converted value\n */ /**\n * The map of localized values for each width.\n */ /**\n * The index type of the locale unit value. It types conversion of units of\n * values that don't start at 0 (i.e. quarters).\n */ /**\n * Converts the unit value to the tuple of values.\n */ /**\n * The tuple of localized era values. The first element represents BC,\n * the second element represents AD.\n */ /**\n * The tuple of localized quarter values. The first element represents Q1.\n */ /**\n * The tuple of localized day values. The first element represents Sunday.\n */ /**\n * The tuple of localized month values. The first element represents January.\n */ function $39a1e2b6239b09b3$export$63596d6ee8878b25(args) {\n    return (value, options)=>{\n        const context = options?.context ? String(options.context) : \"standalone\";\n        let valuesArray;\n        if (context === \"formatting\" && args.formattingValues) {\n            const defaultWidth = args.defaultFormattingWidth || args.defaultWidth;\n            const width = options?.width ? String(options.width) : defaultWidth;\n            valuesArray = args.formattingValues[width] || args.formattingValues[defaultWidth];\n        } else {\n            const defaultWidth = args.defaultWidth;\n            const width = options?.width ? String(options.width) : args.defaultWidth;\n            valuesArray = args.values[width] || args.values[defaultWidth];\n        }\n        const index = args.argumentCallback ? args.argumentCallback(value) : value;\n        // @ts-expect-error - For some reason TypeScript just don't want to match it, no matter how hard we try. I challenge you to try to remove it!\n        return valuesArray[index];\n    };\n}\n\n\nconst $eb9cac2ee97a0b54$var$eraValues = {\n    narrow: [\n        \"B\",\n        \"A\"\n    ],\n    abbreviated: [\n        \"BC\",\n        \"AD\"\n    ],\n    wide: [\n        \"Before Christ\",\n        \"Anno Domini\"\n    ]\n};\nconst $eb9cac2ee97a0b54$var$quarterValues = {\n    narrow: [\n        \"1\",\n        \"2\",\n        \"3\",\n        \"4\"\n    ],\n    abbreviated: [\n        \"Q1\",\n        \"Q2\",\n        \"Q3\",\n        \"Q4\"\n    ],\n    wide: [\n        \"1st quarter\",\n        \"2nd quarter\",\n        \"3rd quarter\",\n        \"4th quarter\"\n    ]\n};\n// Note: in English, the names of days of the week and months are capitalized.\n// If you are making a new locale based on this one, check if the same is true for the language you're working on.\n// Generally, formatted dates should look like they are in the middle of a sentence,\n// e.g. in Spanish language the weekdays and months should be in the lowercase.\nconst $eb9cac2ee97a0b54$var$monthValues = {\n    narrow: [\n        \"J\",\n        \"F\",\n        \"M\",\n        \"A\",\n        \"M\",\n        \"J\",\n        \"J\",\n        \"A\",\n        \"S\",\n        \"O\",\n        \"N\",\n        \"D\"\n    ],\n    abbreviated: [\n        \"Jan\",\n        \"Feb\",\n        \"Mar\",\n        \"Apr\",\n        \"May\",\n        \"Jun\",\n        \"Jul\",\n        \"Aug\",\n        \"Sep\",\n        \"Oct\",\n        \"Nov\",\n        \"Dec\"\n    ],\n    wide: [\n        \"January\",\n        \"February\",\n        \"March\",\n        \"April\",\n        \"May\",\n        \"June\",\n        \"July\",\n        \"August\",\n        \"September\",\n        \"October\",\n        \"November\",\n        \"December\"\n    ]\n};\nconst $eb9cac2ee97a0b54$var$dayValues = {\n    narrow: [\n        \"S\",\n        \"M\",\n        \"T\",\n        \"W\",\n        \"T\",\n        \"F\",\n        \"S\"\n    ],\n    short: [\n        \"Su\",\n        \"Mo\",\n        \"Tu\",\n        \"We\",\n        \"Th\",\n        \"Fr\",\n        \"Sa\"\n    ],\n    abbreviated: [\n        \"Sun\",\n        \"Mon\",\n        \"Tue\",\n        \"Wed\",\n        \"Thu\",\n        \"Fri\",\n        \"Sat\"\n    ],\n    wide: [\n        \"Sunday\",\n        \"Monday\",\n        \"Tuesday\",\n        \"Wednesday\",\n        \"Thursday\",\n        \"Friday\",\n        \"Saturday\"\n    ]\n};\nconst $eb9cac2ee97a0b54$var$dayPeriodValues = {\n    narrow: {\n        am: \"a\",\n        pm: \"p\",\n        midnight: \"mi\",\n        noon: \"n\",\n        morning: \"morning\",\n        afternoon: \"afternoon\",\n        evening: \"evening\",\n        night: \"night\"\n    },\n    abbreviated: {\n        am: \"AM\",\n        pm: \"PM\",\n        midnight: \"midnight\",\n        noon: \"noon\",\n        morning: \"morning\",\n        afternoon: \"afternoon\",\n        evening: \"evening\",\n        night: \"night\"\n    },\n    wide: {\n        am: \"a.m.\",\n        pm: \"p.m.\",\n        midnight: \"midnight\",\n        noon: \"noon\",\n        morning: \"morning\",\n        afternoon: \"afternoon\",\n        evening: \"evening\",\n        night: \"night\"\n    }\n};\nconst $eb9cac2ee97a0b54$var$formattingDayPeriodValues = {\n    narrow: {\n        am: \"a\",\n        pm: \"p\",\n        midnight: \"mi\",\n        noon: \"n\",\n        morning: \"in the morning\",\n        afternoon: \"in the afternoon\",\n        evening: \"in the evening\",\n        night: \"at night\"\n    },\n    abbreviated: {\n        am: \"AM\",\n        pm: \"PM\",\n        midnight: \"midnight\",\n        noon: \"noon\",\n        morning: \"in the morning\",\n        afternoon: \"in the afternoon\",\n        evening: \"in the evening\",\n        night: \"at night\"\n    },\n    wide: {\n        am: \"a.m.\",\n        pm: \"p.m.\",\n        midnight: \"midnight\",\n        noon: \"noon\",\n        morning: \"in the morning\",\n        afternoon: \"in the afternoon\",\n        evening: \"in the evening\",\n        night: \"at night\"\n    }\n};\nconst $eb9cac2ee97a0b54$var$ordinalNumber = (dirtyNumber, _options)=>{\n    const number = Number(dirtyNumber);\n    // If ordinal numbers depend on context, for example,\n    // if they are different for different grammatical genders,\n    // use `options.unit`.\n    //\n    // `unit` can be 'year', 'quarter', 'month', 'week', 'date', 'dayOfYear',\n    // 'day', 'hour', 'minute', 'second'.\n    const rem100 = number % 100;\n    if (rem100 > 20 || rem100 < 10) switch(rem100 % 10){\n        case 1:\n            return number + \"st\";\n        case 2:\n            return number + \"nd\";\n        case 3:\n            return number + \"rd\";\n    }\n    return number + \"th\";\n};\nconst $eb9cac2ee97a0b54$export$b3bd0bc58e36cd63 = {\n    ordinalNumber: $eb9cac2ee97a0b54$var$ordinalNumber,\n    era: (0, $39a1e2b6239b09b3$export$63596d6ee8878b25)({\n        values: $eb9cac2ee97a0b54$var$eraValues,\n        defaultWidth: \"wide\"\n    }),\n    quarter: (0, $39a1e2b6239b09b3$export$63596d6ee8878b25)({\n        values: $eb9cac2ee97a0b54$var$quarterValues,\n        defaultWidth: \"wide\",\n        argumentCallback: (quarter)=>quarter - 1\n    }),\n    month: (0, $39a1e2b6239b09b3$export$63596d6ee8878b25)({\n        values: $eb9cac2ee97a0b54$var$monthValues,\n        defaultWidth: \"wide\"\n    }),\n    day: (0, $39a1e2b6239b09b3$export$63596d6ee8878b25)({\n        values: $eb9cac2ee97a0b54$var$dayValues,\n        defaultWidth: \"wide\"\n    }),\n    dayPeriod: (0, $39a1e2b6239b09b3$export$63596d6ee8878b25)({\n        values: $eb9cac2ee97a0b54$var$dayPeriodValues,\n        defaultWidth: \"wide\",\n        formattingValues: $eb9cac2ee97a0b54$var$formattingDayPeriodValues,\n        defaultFormattingWidth: \"wide\"\n    })\n};\n\n\nfunction $e4df69a5a2d494a3$export$1430a0f35710914d(args) {\n    return (string, options = {})=>{\n        const width = options.width;\n        const matchPattern = width && args.matchPatterns[width] || args.matchPatterns[args.defaultMatchWidth];\n        const matchResult = string.match(matchPattern);\n        if (!matchResult) return null;\n        const matchedString = matchResult[0];\n        const parsePatterns = width && args.parsePatterns[width] || args.parsePatterns[args.defaultParseWidth];\n        const key = Array.isArray(parsePatterns) ? $e4df69a5a2d494a3$var$findIndex(parsePatterns, (pattern)=>pattern.test(matchedString)) : $e4df69a5a2d494a3$var$findKey(parsePatterns, (pattern)=>pattern.test(matchedString));\n        let value;\n        value = args.valueCallback ? args.valueCallback(key) : key;\n        value = options.valueCallback ? options.valueCallback(value) : value;\n        const rest = string.slice(matchedString.length);\n        return {\n            value: value,\n            rest: rest\n        };\n    };\n}\nfunction $e4df69a5a2d494a3$var$findKey(object, predicate) {\n    for(const key in object){\n        if (Object.prototype.hasOwnProperty.call(object, key) && predicate(object[key])) return key;\n    }\n    return undefined;\n}\nfunction $e4df69a5a2d494a3$var$findIndex(array, predicate) {\n    for(let key = 0; key < array.length; key++){\n        if (predicate(array[key])) return key;\n    }\n    return undefined;\n}\n\n\nfunction $2594a2c0202dabc6$export$fdaf2fd6d7edde95(args) {\n    return (string, options = {})=>{\n        const matchResult = string.match(args.matchPattern);\n        if (!matchResult) return null;\n        const matchedString = matchResult[0];\n        const parseResult = string.match(args.parsePattern);\n        if (!parseResult) return null;\n        let value = args.valueCallback ? args.valueCallback(parseResult[0]) : parseResult[0];\n        // [TODO] I challenge you to fix the type\n        value = options.valueCallback ? options.valueCallback(value) : value;\n        const rest = string.slice(matchedString.length);\n        return {\n            value: value,\n            rest: rest\n        };\n    };\n}\n\n\nconst $d2fa28259adb3ab1$var$matchOrdinalNumberPattern = /^(\\d+)(th|st|nd|rd)?/i;\nconst $d2fa28259adb3ab1$var$parseOrdinalNumberPattern = /\\d+/i;\nconst $d2fa28259adb3ab1$var$matchEraPatterns = {\n    narrow: /^(b|a)/i,\n    abbreviated: /^(b\\.?\\s?c\\.?|b\\.?\\s?c\\.?\\s?e\\.?|a\\.?\\s?d\\.?|c\\.?\\s?e\\.?)/i,\n    wide: /^(before christ|before common era|anno domini|common era)/i\n};\nconst $d2fa28259adb3ab1$var$parseEraPatterns = {\n    any: [\n        /^b/i,\n        /^(a|c)/i\n    ]\n};\nconst $d2fa28259adb3ab1$var$matchQuarterPatterns = {\n    narrow: /^[1234]/i,\n    abbreviated: /^q[1234]/i,\n    wide: /^[1234](th|st|nd|rd)? quarter/i\n};\nconst $d2fa28259adb3ab1$var$parseQuarterPatterns = {\n    any: [\n        /1/i,\n        /2/i,\n        /3/i,\n        /4/i\n    ]\n};\nconst $d2fa28259adb3ab1$var$matchMonthPatterns = {\n    narrow: /^[jfmasond]/i,\n    abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,\n    wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i\n};\nconst $d2fa28259adb3ab1$var$parseMonthPatterns = {\n    narrow: [\n        /^j/i,\n        /^f/i,\n        /^m/i,\n        /^a/i,\n        /^m/i,\n        /^j/i,\n        /^j/i,\n        /^a/i,\n        /^s/i,\n        /^o/i,\n        /^n/i,\n        /^d/i\n    ],\n    any: [\n        /^ja/i,\n        /^f/i,\n        /^mar/i,\n        /^ap/i,\n        /^may/i,\n        /^jun/i,\n        /^jul/i,\n        /^au/i,\n        /^s/i,\n        /^o/i,\n        /^n/i,\n        /^d/i\n    ]\n};\nconst $d2fa28259adb3ab1$var$matchDayPatterns = {\n    narrow: /^[smtwf]/i,\n    short: /^(su|mo|tu|we|th|fr|sa)/i,\n    abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,\n    wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i\n};\nconst $d2fa28259adb3ab1$var$parseDayPatterns = {\n    narrow: [\n        /^s/i,\n        /^m/i,\n        /^t/i,\n        /^w/i,\n        /^t/i,\n        /^f/i,\n        /^s/i\n    ],\n    any: [\n        /^su/i,\n        /^m/i,\n        /^tu/i,\n        /^w/i,\n        /^th/i,\n        /^f/i,\n        /^sa/i\n    ]\n};\nconst $d2fa28259adb3ab1$var$matchDayPeriodPatterns = {\n    narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,\n    any: /^([ap]\\.?\\s?m\\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i\n};\nconst $d2fa28259adb3ab1$var$parseDayPeriodPatterns = {\n    any: {\n        am: /^a/i,\n        pm: /^p/i,\n        midnight: /^mi/i,\n        noon: /^no/i,\n        morning: /morning/i,\n        afternoon: /afternoon/i,\n        evening: /evening/i,\n        night: /night/i\n    }\n};\nconst $d2fa28259adb3ab1$export$4659b591c19bdf3d = {\n    ordinalNumber: (0, $2594a2c0202dabc6$export$fdaf2fd6d7edde95)({\n        matchPattern: $d2fa28259adb3ab1$var$matchOrdinalNumberPattern,\n        parsePattern: $d2fa28259adb3ab1$var$parseOrdinalNumberPattern,\n        valueCallback: (value)=>parseInt(value, 10)\n    }),\n    era: (0, $e4df69a5a2d494a3$export$1430a0f35710914d)({\n        matchPatterns: $d2fa28259adb3ab1$var$matchEraPatterns,\n        defaultMatchWidth: \"wide\",\n        parsePatterns: $d2fa28259adb3ab1$var$parseEraPatterns,\n        defaultParseWidth: \"any\"\n    }),\n    quarter: (0, $e4df69a5a2d494a3$export$1430a0f35710914d)({\n        matchPatterns: $d2fa28259adb3ab1$var$matchQuarterPatterns,\n        defaultMatchWidth: \"wide\",\n        parsePatterns: $d2fa28259adb3ab1$var$parseQuarterPatterns,\n        defaultParseWidth: \"any\",\n        valueCallback: (index)=>index + 1\n    }),\n    month: (0, $e4df69a5a2d494a3$export$1430a0f35710914d)({\n        matchPatterns: $d2fa28259adb3ab1$var$matchMonthPatterns,\n        defaultMatchWidth: \"wide\",\n        parsePatterns: $d2fa28259adb3ab1$var$parseMonthPatterns,\n        defaultParseWidth: \"any\"\n    }),\n    day: (0, $e4df69a5a2d494a3$export$1430a0f35710914d)({\n        matchPatterns: $d2fa28259adb3ab1$var$matchDayPatterns,\n        defaultMatchWidth: \"wide\",\n        parsePatterns: $d2fa28259adb3ab1$var$parseDayPatterns,\n        defaultParseWidth: \"any\"\n    }),\n    dayPeriod: (0, $e4df69a5a2d494a3$export$1430a0f35710914d)({\n        matchPatterns: $d2fa28259adb3ab1$var$matchDayPeriodPatterns,\n        defaultMatchWidth: \"any\",\n        parsePatterns: $d2fa28259adb3ab1$var$parseDayPeriodPatterns,\n        defaultParseWidth: \"any\"\n    })\n};\n\n\nconst $cd0c27002eb93234$export$137380d9ce54f7f = {\n    code: \"en-US\",\n    formatDistance: (0, $0bc92389da5ca8f2$export$2c14ff85d6318973),\n    formatLong: (0, $63c01f9040a729a9$export$cbf60ecb96cbb82f),\n    formatRelative: (0, $f529b3bee3f6d835$export$8fbbfd65594f46a0),\n    localize: (0, $eb9cac2ee97a0b54$export$b3bd0bc58e36cd63),\n    match: (0, $d2fa28259adb3ab1$export$4659b591c19bdf3d),\n    options: {\n        weekStartsOn: 0 /* Sunday */ ,\n        firstWeekContainsDate: 1\n    }\n};\nvar // Fallback for modularized imports:\n$cd0c27002eb93234$export$2e2bcd8739ae039 = $cd0c27002eb93234$export$137380d9ce54f7f;\n\n\nlet $39440020b58e1ef8$var$defaultOptions = {};\nfunction $39440020b58e1ef8$export$430a3269e24b912e() {\n    return $39440020b58e1ef8$var$defaultOptions;\n}\nfunction $39440020b58e1ef8$export$95365be1b0704abc(newOptions) {\n    $39440020b58e1ef8$var$defaultOptions = newOptions;\n}\n\n\n\nfunction $231bfb8d72679740$export$e67a095c620b86fe(argument, context) {\n    // [TODO] Get rid of `toDate` or `constructFrom`?\n    return (0, $abb9adbdb26342b3$export$ead8a1812b171991)(context || argument, argument);\n}\nvar // Fallback for modularized imports:\n$231bfb8d72679740$export$2e2bcd8739ae039 = $231bfb8d72679740$export$e67a095c620b86fe;\n\n\nfunction $92dc0740ffabe180$export$113002b5eff6e430(date) {\n    const _date = (0, $231bfb8d72679740$export$e67a095c620b86fe)(date);\n    const utcDate = new Date(Date.UTC(_date.getFullYear(), _date.getMonth(), _date.getDate(), _date.getHours(), _date.getMinutes(), _date.getSeconds(), _date.getMilliseconds()));\n    utcDate.setUTCFullYear(_date.getFullYear());\n    return +date - +utcDate;\n}\n\n\n\nfunction $002c8181c95d5119$export$9f53b88e82f64d8d(context, ...dates) {\n    const normalize = (0, $abb9adbdb26342b3$export$ead8a1812b171991).bind(null, context || dates.find((date)=>typeof date === \"object\"));\n    return dates.map(normalize);\n}\n\n\n\nfunction $e9cff913190bd013$export$fe114145ae75d197(dateLeft, dateRight) {\n    const diff = +(0, $231bfb8d72679740$export$e67a095c620b86fe)(dateLeft) - +(0, $231bfb8d72679740$export$e67a095c620b86fe)(dateRight);\n    if (diff < 0) return -1;\n    else if (diff > 0) return 1;\n    // Return 0 if diff is 0; return NaN if diff is NaN\n    return diff;\n}\nvar // Fallback for modularized imports:\n$e9cff913190bd013$export$2e2bcd8739ae039 = $e9cff913190bd013$export$fe114145ae75d197;\n\n\n\n\n\n\nfunction $8aa264ebd3f03841$export$489984ac7c996389(laterDate, earlierDate, options) {\n    const [laterDate_, earlierDate_] = (0, $002c8181c95d5119$export$9f53b88e82f64d8d)(options?.in, laterDate, earlierDate);\n    const yearsDiff = laterDate_.getFullYear() - earlierDate_.getFullYear();\n    const monthsDiff = laterDate_.getMonth() - earlierDate_.getMonth();\n    return yearsDiff * 12 + monthsDiff;\n}\nvar // Fallback for modularized imports:\n$8aa264ebd3f03841$export$2e2bcd8739ae039 = $8aa264ebd3f03841$export$489984ac7c996389;\n\n\n\nfunction $b6a2419fd0059687$export$eb9a03f0e9aa6cea(date, options) {\n    const _date = (0, $231bfb8d72679740$export$e67a095c620b86fe)(date, options?.in);\n    _date.setHours(23, 59, 59, 999);\n    return _date;\n}\nvar // Fallback for modularized imports:\n$b6a2419fd0059687$export$2e2bcd8739ae039 = $b6a2419fd0059687$export$eb9a03f0e9aa6cea;\n\n\n\nfunction $e58340063d97ab50$export$a2258d9c4118825c(date, options) {\n    const _date = (0, $231bfb8d72679740$export$e67a095c620b86fe)(date, options?.in);\n    const month = _date.getMonth();\n    _date.setFullYear(_date.getFullYear(), month + 1, 0);\n    _date.setHours(23, 59, 59, 999);\n    return _date;\n}\nvar // Fallback for modularized imports:\n$e58340063d97ab50$export$2e2bcd8739ae039 = $e58340063d97ab50$export$a2258d9c4118825c;\n\n\n\nfunction $d2050f4e5c1a3003$export$c817d0312007ea5e(date, options) {\n    const _date = (0, $231bfb8d72679740$export$e67a095c620b86fe)(date, options?.in);\n    return +(0, $b6a2419fd0059687$export$eb9a03f0e9aa6cea)(_date, options) === +(0, $e58340063d97ab50$export$a2258d9c4118825c)(_date, options);\n}\nvar // Fallback for modularized imports:\n$d2050f4e5c1a3003$export$2e2bcd8739ae039 = $d2050f4e5c1a3003$export$c817d0312007ea5e;\n\n\nfunction $4bb5df50b9b59298$export$fc1ed482c2861792(laterDate, earlierDate, options) {\n    const [laterDate_, workingLaterDate, earlierDate_] = (0, $002c8181c95d5119$export$9f53b88e82f64d8d)(options?.in, laterDate, laterDate, earlierDate);\n    const sign = (0, $e9cff913190bd013$export$fe114145ae75d197)(workingLaterDate, earlierDate_);\n    const difference = Math.abs((0, $8aa264ebd3f03841$export$489984ac7c996389)(workingLaterDate, earlierDate_));\n    if (difference < 1) return 0;\n    if (workingLaterDate.getMonth() === 1 && workingLaterDate.getDate() > 27) workingLaterDate.setDate(30);\n    workingLaterDate.setMonth(workingLaterDate.getMonth() - sign * difference);\n    let isLastMonthNotFull = (0, $e9cff913190bd013$export$fe114145ae75d197)(workingLaterDate, earlierDate_) === -sign;\n    if ((0, $d2050f4e5c1a3003$export$c817d0312007ea5e)(laterDate_) && difference === 1 && (0, $e9cff913190bd013$export$fe114145ae75d197)(laterDate_, earlierDate_) === 1) isLastMonthNotFull = false;\n    const result = sign * (difference - +isLastMonthNotFull);\n    return result === 0 ? 0 : result;\n}\nvar // Fallback for modularized imports:\n$4bb5df50b9b59298$export$2e2bcd8739ae039 = $4bb5df50b9b59298$export$fc1ed482c2861792;\n\n\nfunction $495af4000bb18bf7$export$b6474a47258c1211(method) {\n    return (number)=>{\n        const round = method ? Math[method] : Math.trunc;\n        const result = round(number);\n        // Prevent negative zero\n        return result === 0 ? 0 : result;\n    };\n}\n\n\n\nfunction $b7913fc338fe28ad$export$7be94d13716b4bf6(laterDate, earlierDate) {\n    return +(0, $231bfb8d72679740$export$e67a095c620b86fe)(laterDate) - +(0, $231bfb8d72679740$export$e67a095c620b86fe)(earlierDate);\n}\nvar // Fallback for modularized imports:\n$b7913fc338fe28ad$export$2e2bcd8739ae039 = $b7913fc338fe28ad$export$7be94d13716b4bf6;\n\n\nfunction $e9186d0161460806$export$c1889aec51783710(laterDate, earlierDate, options) {\n    const diff = (0, $b7913fc338fe28ad$export$7be94d13716b4bf6)(laterDate, earlierDate) / 1000;\n    return (0, $495af4000bb18bf7$export$b6474a47258c1211)(options?.roundingMethod)(diff);\n}\nvar // Fallback for modularized imports:\n$e9186d0161460806$export$2e2bcd8739ae039 = $e9186d0161460806$export$c1889aec51783710;\n\n\nfunction $9d83b4c514336dd1$export$2c14ff85d6318973(laterDate, earlierDate, options) {\n    const defaultOptions = (0, $39440020b58e1ef8$export$430a3269e24b912e)();\n    const locale = options?.locale ?? defaultOptions.locale ?? (0, $cd0c27002eb93234$export$137380d9ce54f7f);\n    const minutesInAlmostTwoDays = 2520;\n    const comparison = (0, $e9cff913190bd013$export$fe114145ae75d197)(laterDate, earlierDate);\n    if (isNaN(comparison)) throw new RangeError(\"Invalid time value\");\n    const localizeOptions = Object.assign({}, options, {\n        addSuffix: options?.addSuffix,\n        comparison: comparison\n    });\n    const [laterDate_, earlierDate_] = (0, $002c8181c95d5119$export$9f53b88e82f64d8d)(options?.in, ...comparison > 0 ? [\n        earlierDate,\n        laterDate\n    ] : [\n        laterDate,\n        earlierDate\n    ]);\n    const seconds = (0, $e9186d0161460806$export$c1889aec51783710)(earlierDate_, laterDate_);\n    const offsetInSeconds = ((0, $92dc0740ffabe180$export$113002b5eff6e430)(earlierDate_) - (0, $92dc0740ffabe180$export$113002b5eff6e430)(laterDate_)) / 1000;\n    const minutes = Math.round((seconds - offsetInSeconds) / 60);\n    let months;\n    // 0 up to 2 mins\n    if (minutes < 2) {\n        if (options?.includeSeconds) {\n            if (seconds < 5) return locale.formatDistance(\"lessThanXSeconds\", 5, localizeOptions);\n            else if (seconds < 10) return locale.formatDistance(\"lessThanXSeconds\", 10, localizeOptions);\n            else if (seconds < 20) return locale.formatDistance(\"lessThanXSeconds\", 20, localizeOptions);\n            else if (seconds < 40) return locale.formatDistance(\"halfAMinute\", 0, localizeOptions);\n            else if (seconds < 60) return locale.formatDistance(\"lessThanXMinutes\", 1, localizeOptions);\n            else return locale.formatDistance(\"xMinutes\", 1, localizeOptions);\n        } else {\n            if (minutes === 0) return locale.formatDistance(\"lessThanXMinutes\", 1, localizeOptions);\n            else return locale.formatDistance(\"xMinutes\", minutes, localizeOptions);\n        }\n    } else if (minutes < 45) return locale.formatDistance(\"xMinutes\", minutes, localizeOptions);\n    else if (minutes < 90) return locale.formatDistance(\"aboutXHours\", 1, localizeOptions);\n    else if (minutes < (0, $8540a44f59a4af84$export$2423174df8cd3cd2)) {\n        const hours = Math.round(minutes / 60);\n        return locale.formatDistance(\"aboutXHours\", hours, localizeOptions);\n    // 1 day up to 1.75 days\n    } else if (minutes < minutesInAlmostTwoDays) return locale.formatDistance(\"xDays\", 1, localizeOptions);\n    else if (minutes < (0, $8540a44f59a4af84$export$ab7da2ccd1075c38)) {\n        const days = Math.round(minutes / (0, $8540a44f59a4af84$export$2423174df8cd3cd2));\n        return locale.formatDistance(\"xDays\", days, localizeOptions);\n    // 1 month up to 2 months\n    } else if (minutes < (0, $8540a44f59a4af84$export$ab7da2ccd1075c38) * 2) {\n        months = Math.round(minutes / (0, $8540a44f59a4af84$export$ab7da2ccd1075c38));\n        return locale.formatDistance(\"aboutXMonths\", months, localizeOptions);\n    }\n    months = (0, $4bb5df50b9b59298$export$fc1ed482c2861792)(earlierDate_, laterDate_);\n    // 2 months up to 12 months\n    if (months < 12) {\n        const nearestMonth = Math.round(minutes / (0, $8540a44f59a4af84$export$ab7da2ccd1075c38));\n        return locale.formatDistance(\"xMonths\", nearestMonth, localizeOptions);\n    // 1 year up to max Date\n    } else {\n        const monthsSinceStartOfYear = months % 12;\n        const years = Math.trunc(months / 12);\n        // N years up to 1 years 3 months\n        if (monthsSinceStartOfYear < 3) return locale.formatDistance(\"aboutXYears\", years, localizeOptions);\n        else if (monthsSinceStartOfYear < 9) return locale.formatDistance(\"overXYears\", years, localizeOptions);\n        else return locale.formatDistance(\"almostXYears\", years + 1, localizeOptions);\n    }\n}\nvar // Fallback for modularized imports:\n$9d83b4c514336dd1$export$2e2bcd8739ae039 = $9d83b4c514336dd1$export$2c14ff85d6318973;\n\n\nfunction $b8de4dab140c0dd6$export$d130c20a256f8817(date, options) {\n    return (0, $9d83b4c514336dd1$export$2c14ff85d6318973)(date, (0, $d8623e255497753b$export$18c3c6510fb97afc)(date), options);\n}\nvar // Fallback for modularized imports:\n$b8de4dab140c0dd6$export$2e2bcd8739ae039 = $b8de4dab140c0dd6$export$d130c20a256f8817;\n\n\nconst $dad545c909cfec2d$var$date = \"1996-09-13 10:00:00\";\ndocument.body.textContent = `${(0, $b8de4dab140c0dd6$export$d130c20a256f8817)(new Date($dad545c909cfec2d$var$date))} ago`;\n\n\n//# sourceMappingURL=index.b56130fd.js.map\n","import { formatDistanceToNow } from \"date-fns\";\r\n\r\nconst date = \"1996-09-13 10:00:00\";\r\ndocument.body.textContent = `${formatDistanceToNow(new Date(date))} ago`;\r\n","import { constructNow } from \"./constructNow.js\";\n\nimport { formatDistance } from \"./formatDistance.js\";\n\n/**\n * The {@link formatDistanceToNow} function options.\n */\n\n/**\n * @name formatDistanceToNow\n * @category Common Helpers\n * @summary Return the distance between the given date and now in words.\n * @pure false\n *\n * @description\n * Return the distance between the given date and now in words.\n *\n * | Distance to now                                                   | Result              |\n * |-------------------------------------------------------------------|---------------------|\n * | 0 ... 30 secs                                                     | less than a minute  |\n * | 30 secs ... 1 min 30 secs                                         | 1 minute            |\n * | 1 min 30 secs ... 44 mins 30 secs                                 | [2..44] minutes     |\n * | 44 mins ... 30 secs ... 89 mins 30 secs                           | about 1 hour        |\n * | 89 mins 30 secs ... 23 hrs 59 mins 30 secs                        | about [2..24] hours |\n * | 23 hrs 59 mins 30 secs ... 41 hrs 59 mins 30 secs                 | 1 day               |\n * | 41 hrs 59 mins 30 secs ... 29 days 23 hrs 59 mins 30 secs         | [2..30] days        |\n * | 29 days 23 hrs 59 mins 30 secs ... 44 days 23 hrs 59 mins 30 secs | about 1 month       |\n * | 44 days 23 hrs 59 mins 30 secs ... 59 days 23 hrs 59 mins 30 secs | about 2 months      |\n * | 59 days 23 hrs 59 mins 30 secs ... 1 yr                           | [2..12] months      |\n * | 1 yr ... 1 yr 3 months                                            | about 1 year        |\n * | 1 yr 3 months ... 1 yr 9 month s                                  | over 1 year         |\n * | 1 yr 9 months ... 2 yrs                                           | almost 2 years      |\n * | N yrs ... N yrs 3 months                                          | about N years       |\n * | N yrs 3 months ... N yrs 9 months                                 | over N years        |\n * | N yrs 9 months ... N+1 yrs                                        | almost N+1 years    |\n *\n * With `options.includeSeconds == true`:\n * | Distance to now     | Result               |\n * |---------------------|----------------------|\n * | 0 secs ... 5 secs   | less than 5 seconds  |\n * | 5 secs ... 10 secs  | less than 10 seconds |\n * | 10 secs ... 20 secs | less than 20 seconds |\n * | 20 secs ... 40 secs | half a minute        |\n * | 40 secs ... 60 secs | less than a minute   |\n * | 60 secs ... 90 secs | 1 minute             |\n *\n * @param date - The given date\n * @param options - The object with options\n *\n * @returns The distance in words\n *\n * @throws `date` must not be Invalid Date\n * @throws `options.locale` must contain `formatDistance` property\n *\n * @example\n * // If today is 1 January 2015, what is the distance to 2 July 2014?\n * const result = formatDistanceToNow(\n *   new Date(2014, 6, 2)\n * )\n * //=> '6 months'\n *\n * @example\n * // If now is 1 January 2015 00:00:00,\n * // what is the distance to 1 January 2015 00:00:15, including seconds?\n * const result = formatDistanceToNow(\n *   new Date(2015, 0, 1, 0, 0, 15),\n *   {includeSeconds: true}\n * )\n * //=> 'less than 20 seconds'\n *\n * @example\n * // If today is 1 January 2015,\n * // what is the distance to 1 January 2016, with a suffix?\n * const result = formatDistanceToNow(\n *   new Date(2016, 0, 1),\n *   {addSuffix: true}\n * )\n * //=> 'in about 1 year'\n *\n * @example\n * // If today is 1 January 2015,\n * // what is the distance to 1 August 2016 in Esperanto?\n * const eoLocale = require('date-fns/locale/eo')\n * const result = formatDistanceToNow(\n *   new Date(2016, 7, 1),\n *   {locale: eoLocale}\n * )\n * //=> 'pli ol 1 jaro'\n */\nexport function formatDistanceToNow(date, options) {\n  return formatDistance(date, constructNow(date), options);\n}\n\n// Fallback for modularized imports:\nexport default formatDistanceToNow;\n","import { constructFrom } from \"./constructFrom.js\";\n\n/**\n * @name constructNow\n * @category Generic Helpers\n * @summary Constructs a new current date using the passed value constructor.\n * @pure false\n *\n * @description\n * The function constructs a new current date using the constructor from\n * the reference date. It helps to build generic functions that accept date\n * extensions and use the current date.\n *\n * It defaults to `Date` if the passed reference date is a number or a string.\n *\n * @param date - The reference date to take constructor from\n *\n * @returns Current date initialized using the given date constructor\n *\n * @example\n * import { constructNow, isSameDay } from 'date-fns'\n *\n * function isToday<DateType extends Date>(\n *   date: DateArg<DateType>,\n * ): boolean {\n *   // If we were to use `new Date()` directly, the function would  behave\n *   // differently in different timezones and return false for the same date.\n *   return isSameDay(date, constructNow(date));\n * }\n */\nexport function constructNow(date) {\n  return constructFrom(date, Date.now());\n}\n\n// Fallback for modularized imports:\nexport default constructNow;\n","import { constructFromSymbol } from \"./constants.js\";\n\n/**\n * @name constructFrom\n * @category Generic Helpers\n * @summary Constructs a date using the reference date and the value\n *\n * @description\n * The function constructs a new date using the constructor from the reference\n * date and the given value. It helps to build generic functions that accept\n * date extensions.\n *\n * It defaults to `Date` if the passed reference date is a number or a string.\n *\n * Starting from v3.7.0, it allows to construct a date using `[Symbol.for(\"constructDateFrom\")]`\n * enabling to transfer extra properties from the reference date to the new date.\n * It's useful for extensions like [`TZDate`](https://github.com/date-fns/tz)\n * that accept a time zone as a constructor argument.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The reference date to take constructor from\n * @param value - The value to create the date\n *\n * @returns Date initialized using the given date and value\n *\n * @example\n * import { constructFrom } from \"./constructFrom/date-fns\";\n *\n * // A function that clones a date preserving the original type\n * function cloneDate<DateType extends Date>(date: DateType): DateType {\n *   return constructFrom(\n *     date, // Use constructor from the given date\n *     date.getTime() // Use the date value to create a new date\n *   );\n * }\n */\nexport function constructFrom(date, value) {\n  if (typeof date === \"function\") return date(value);\n\n  if (date && typeof date === \"object\" && constructFromSymbol in date)\n    return date[constructFromSymbol](value);\n\n  if (date instanceof Date) return new date.constructor(value);\n\n  return new Date(value);\n}\n\n// Fallback for modularized imports:\nexport default constructFrom;\n","/**\n * @module constants\n * @summary Useful constants\n * @description\n * Collection of useful date constants.\n *\n * The constants could be imported from `date-fns/constants`:\n *\n * ```ts\n * import { maxTime, minTime } from \"./constants/date-fns/constants\";\n *\n * function isAllowedTime(time) {\n *   return time <= maxTime && time >= minTime;\n * }\n * ```\n */\n\n/**\n * @constant\n * @name daysInWeek\n * @summary Days in 1 week.\n */\nexport const daysInWeek = 7;\n\n/**\n * @constant\n * @name daysInYear\n * @summary Days in 1 year.\n *\n * @description\n * How many days in a year.\n *\n * One years equals 365.2425 days according to the formula:\n *\n * > Leap year occurs every 4 years, except for years that are divisible by 100 and not divisible by 400.\n * > 1 mean year = (365+1/4-1/100+1/400) days = 365.2425 days\n */\nexport const daysInYear = 365.2425;\n\n/**\n * @constant\n * @name maxTime\n * @summary Maximum allowed time.\n *\n * @example\n * import { maxTime } from \"./constants/date-fns/constants\";\n *\n * const isValid = 8640000000000001 <= maxTime;\n * //=> false\n *\n * new Date(8640000000000001);\n * //=> Invalid Date\n */\nexport const maxTime = Math.pow(10, 8) * 24 * 60 * 60 * 1000;\n\n/**\n * @constant\n * @name minTime\n * @summary Minimum allowed time.\n *\n * @example\n * import { minTime } from \"./constants/date-fns/constants\";\n *\n * const isValid = -8640000000000001 >= minTime;\n * //=> false\n *\n * new Date(-8640000000000001)\n * //=> Invalid Date\n */\nexport const minTime = -maxTime;\n\n/**\n * @constant\n * @name millisecondsInWeek\n * @summary Milliseconds in 1 week.\n */\nexport const millisecondsInWeek = 604800000;\n\n/**\n * @constant\n * @name millisecondsInDay\n * @summary Milliseconds in 1 day.\n */\nexport const millisecondsInDay = 86400000;\n\n/**\n * @constant\n * @name millisecondsInMinute\n * @summary Milliseconds in 1 minute\n */\nexport const millisecondsInMinute = 60000;\n\n/**\n * @constant\n * @name millisecondsInHour\n * @summary Milliseconds in 1 hour\n */\nexport const millisecondsInHour = 3600000;\n\n/**\n * @constant\n * @name millisecondsInSecond\n * @summary Milliseconds in 1 second\n */\nexport const millisecondsInSecond = 1000;\n\n/**\n * @constant\n * @name minutesInYear\n * @summary Minutes in 1 year.\n */\nexport const minutesInYear = 525600;\n\n/**\n * @constant\n * @name minutesInMonth\n * @summary Minutes in 1 month.\n */\nexport const minutesInMonth = 43200;\n\n/**\n * @constant\n * @name minutesInDay\n * @summary Minutes in 1 day.\n */\nexport const minutesInDay = 1440;\n\n/**\n * @constant\n * @name minutesInHour\n * @summary Minutes in 1 hour.\n */\nexport const minutesInHour = 60;\n\n/**\n * @constant\n * @name monthsInQuarter\n * @summary Months in 1 quarter.\n */\nexport const monthsInQuarter = 3;\n\n/**\n * @constant\n * @name monthsInYear\n * @summary Months in 1 year.\n */\nexport const monthsInYear = 12;\n\n/**\n * @constant\n * @name quartersInYear\n * @summary Quarters in 1 year\n */\nexport const quartersInYear = 4;\n\n/**\n * @constant\n * @name secondsInHour\n * @summary Seconds in 1 hour.\n */\nexport const secondsInHour = 3600;\n\n/**\n * @constant\n * @name secondsInMinute\n * @summary Seconds in 1 minute.\n */\nexport const secondsInMinute = 60;\n\n/**\n * @constant\n * @name secondsInDay\n * @summary Seconds in 1 day.\n */\nexport const secondsInDay = secondsInHour * 24;\n\n/**\n * @constant\n * @name secondsInWeek\n * @summary Seconds in 1 week.\n */\nexport const secondsInWeek = secondsInDay * 7;\n\n/**\n * @constant\n * @name secondsInYear\n * @summary Seconds in 1 year.\n */\nexport const secondsInYear = secondsInDay * daysInYear;\n\n/**\n * @constant\n * @name secondsInMonth\n * @summary Seconds in 1 month\n */\nexport const secondsInMonth = secondsInYear / 12;\n\n/**\n * @constant\n * @name secondsInQuarter\n * @summary Seconds in 1 quarter.\n */\nexport const secondsInQuarter = secondsInMonth * 3;\n\n/**\n * @constant\n * @name constructFromSymbol\n * @summary Symbol enabling Date extensions to inherit properties from the reference date.\n *\n * The symbol is used to enable the `constructFrom` function to construct a date\n * using a reference date and a value. It allows to transfer extra properties\n * from the reference date to the new date. It's useful for extensions like\n * [`TZDate`](https://github.com/date-fns/tz) that accept a time zone as\n * a constructor argument.\n */\nexport const constructFromSymbol = Symbol.for(\"constructDateFrom\");\n","import { defaultLocale } from \"./_lib/defaultLocale.js\";\nimport { getDefaultOptions } from \"./_lib/defaultOptions.js\";\nimport { getTimezoneOffsetInMilliseconds } from \"./_lib/getTimezoneOffsetInMilliseconds.js\";\nimport { normalizeDates } from \"./_lib/normalizeDates.js\";\nimport { compareAsc } from \"./compareAsc.js\";\nimport { minutesInDay, minutesInMonth } from \"./constants.js\";\nimport { differenceInMonths } from \"./differenceInMonths.js\";\nimport { differenceInSeconds } from \"./differenceInSeconds.js\";\n\n/**\n * The {@link formatDistance} function options.\n */\n\n/**\n * @name formatDistance\n * @category Common Helpers\n * @summary Return the distance between the given dates in words.\n *\n * @description\n * Return the distance between the given dates in words.\n *\n * | Distance between dates                                            | Result              |\n * |-------------------------------------------------------------------|---------------------|\n * | 0 ... 30 secs                                                     | less than a minute  |\n * | 30 secs ... 1 min 30 secs                                         | 1 minute            |\n * | 1 min 30 secs ... 44 mins 30 secs                                 | [2..44] minutes     |\n * | 44 mins ... 30 secs ... 89 mins 30 secs                           | about 1 hour        |\n * | 89 mins 30 secs ... 23 hrs 59 mins 30 secs                        | about [2..24] hours |\n * | 23 hrs 59 mins 30 secs ... 41 hrs 59 mins 30 secs                 | 1 day               |\n * | 41 hrs 59 mins 30 secs ... 29 days 23 hrs 59 mins 30 secs         | [2..30] days        |\n * | 29 days 23 hrs 59 mins 30 secs ... 44 days 23 hrs 59 mins 30 secs | about 1 month       |\n * | 44 days 23 hrs 59 mins 30 secs ... 59 days 23 hrs 59 mins 30 secs | about 2 months      |\n * | 59 days 23 hrs 59 mins 30 secs ... 1 yr                           | [2..12] months      |\n * | 1 yr ... 1 yr 3 months                                            | about 1 year        |\n * | 1 yr 3 months ... 1 yr 9 month s                                  | over 1 year         |\n * | 1 yr 9 months ... 2 yrs                                           | almost 2 years      |\n * | N yrs ... N yrs 3 months                                          | about N years       |\n * | N yrs 3 months ... N yrs 9 months                                 | over N years        |\n * | N yrs 9 months ... N+1 yrs                                        | almost N+1 years    |\n *\n * With `options.includeSeconds == true`:\n * | Distance between dates | Result               |\n * |------------------------|----------------------|\n * | 0 secs ... 5 secs      | less than 5 seconds  |\n * | 5 secs ... 10 secs     | less than 10 seconds |\n * | 10 secs ... 20 secs    | less than 20 seconds |\n * | 20 secs ... 40 secs    | half a minute        |\n * | 40 secs ... 60 secs    | less than a minute   |\n * | 60 secs ... 90 secs    | 1 minute             |\n *\n * @param laterDate - The date\n * @param earlierDate - The date to compare with\n * @param options - An object with options\n *\n * @returns The distance in words\n *\n * @throws `date` must not be Invalid Date\n * @throws `baseDate` must not be Invalid Date\n * @throws `options.locale` must contain `formatDistance` property\n *\n * @example\n * // What is the distance between 2 July 2014 and 1 January 2015?\n * const result = formatDistance(new Date(2014, 6, 2), new Date(2015, 0, 1))\n * //=> '6 months'\n *\n * @example\n * // What is the distance between 1 January 2015 00:00:15\n * // and 1 January 2015 00:00:00, including seconds?\n * const result = formatDistance(\n *   new Date(2015, 0, 1, 0, 0, 15),\n *   new Date(2015, 0, 1, 0, 0, 0),\n *   { includeSeconds: true }\n * )\n * //=> 'less than 20 seconds'\n *\n * @example\n * // What is the distance from 1 January 2016\n * // to 1 January 2015, with a suffix?\n * const result = formatDistance(new Date(2015, 0, 1), new Date(2016, 0, 1), {\n *   addSuffix: true\n * })\n * //=> 'about 1 year ago'\n *\n * @example\n * // What is the distance between 1 August 2016 and 1 January 2015 in Esperanto?\n * import { eoLocale } from 'date-fns/locale/eo'\n * const result = formatDistance(new Date(2016, 7, 1), new Date(2015, 0, 1), {\n *   locale: eoLocale\n * })\n * //=> 'pli ol 1 jaro'\n */\nexport function formatDistance(laterDate, earlierDate, options) {\n  const defaultOptions = getDefaultOptions();\n  const locale = options?.locale ?? defaultOptions.locale ?? defaultLocale;\n  const minutesInAlmostTwoDays = 2520;\n\n  const comparison = compareAsc(laterDate, earlierDate);\n\n  if (isNaN(comparison)) throw new RangeError(\"Invalid time value\");\n\n  const localizeOptions = Object.assign({}, options, {\n    addSuffix: options?.addSuffix,\n    comparison: comparison,\n  });\n\n  const [laterDate_, earlierDate_] = normalizeDates(\n    options?.in,\n    ...(comparison > 0 ? [earlierDate, laterDate] : [laterDate, earlierDate]),\n  );\n\n  const seconds = differenceInSeconds(earlierDate_, laterDate_);\n  const offsetInSeconds =\n    (getTimezoneOffsetInMilliseconds(earlierDate_) -\n      getTimezoneOffsetInMilliseconds(laterDate_)) /\n    1000;\n  const minutes = Math.round((seconds - offsetInSeconds) / 60);\n  let months;\n\n  // 0 up to 2 mins\n  if (minutes < 2) {\n    if (options?.includeSeconds) {\n      if (seconds < 5) {\n        return locale.formatDistance(\"lessThanXSeconds\", 5, localizeOptions);\n      } else if (seconds < 10) {\n        return locale.formatDistance(\"lessThanXSeconds\", 10, localizeOptions);\n      } else if (seconds < 20) {\n        return locale.formatDistance(\"lessThanXSeconds\", 20, localizeOptions);\n      } else if (seconds < 40) {\n        return locale.formatDistance(\"halfAMinute\", 0, localizeOptions);\n      } else if (seconds < 60) {\n        return locale.formatDistance(\"lessThanXMinutes\", 1, localizeOptions);\n      } else {\n        return locale.formatDistance(\"xMinutes\", 1, localizeOptions);\n      }\n    } else {\n      if (minutes === 0) {\n        return locale.formatDistance(\"lessThanXMinutes\", 1, localizeOptions);\n      } else {\n        return locale.formatDistance(\"xMinutes\", minutes, localizeOptions);\n      }\n    }\n\n    // 2 mins up to 0.75 hrs\n  } else if (minutes < 45) {\n    return locale.formatDistance(\"xMinutes\", minutes, localizeOptions);\n\n    // 0.75 hrs up to 1.5 hrs\n  } else if (minutes < 90) {\n    return locale.formatDistance(\"aboutXHours\", 1, localizeOptions);\n\n    // 1.5 hrs up to 24 hrs\n  } else if (minutes < minutesInDay) {\n    const hours = Math.round(minutes / 60);\n    return locale.formatDistance(\"aboutXHours\", hours, localizeOptions);\n\n    // 1 day up to 1.75 days\n  } else if (minutes < minutesInAlmostTwoDays) {\n    return locale.formatDistance(\"xDays\", 1, localizeOptions);\n\n    // 1.75 days up to 30 days\n  } else if (minutes < minutesInMonth) {\n    const days = Math.round(minutes / minutesInDay);\n    return locale.formatDistance(\"xDays\", days, localizeOptions);\n\n    // 1 month up to 2 months\n  } else if (minutes < minutesInMonth * 2) {\n    months = Math.round(minutes / minutesInMonth);\n    return locale.formatDistance(\"aboutXMonths\", months, localizeOptions);\n  }\n\n  months = differenceInMonths(earlierDate_, laterDate_);\n\n  // 2 months up to 12 months\n  if (months < 12) {\n    const nearestMonth = Math.round(minutes / minutesInMonth);\n    return locale.formatDistance(\"xMonths\", nearestMonth, localizeOptions);\n\n    // 1 year up to max Date\n  } else {\n    const monthsSinceStartOfYear = months % 12;\n    const years = Math.trunc(months / 12);\n\n    // N years up to 1 years 3 months\n    if (monthsSinceStartOfYear < 3) {\n      return locale.formatDistance(\"aboutXYears\", years, localizeOptions);\n\n      // N years 3 months up to N years 9 months\n    } else if (monthsSinceStartOfYear < 9) {\n      return locale.formatDistance(\"overXYears\", years, localizeOptions);\n\n      // N years 9 months up to N year 12 months\n    } else {\n      return locale.formatDistance(\"almostXYears\", years + 1, localizeOptions);\n    }\n  }\n}\n\n// Fallback for modularized imports:\nexport default formatDistance;\n","import { formatDistance } from \"./en-US/_lib/formatDistance.js\";\nimport { formatLong } from \"./en-US/_lib/formatLong.js\";\nimport { formatRelative } from \"./en-US/_lib/formatRelative.js\";\nimport { localize } from \"./en-US/_lib/localize.js\";\nimport { match } from \"./en-US/_lib/match.js\";\n\n/**\n * @category Locales\n * @summary English locale (United States).\n * @language English\n * @iso-639-2 eng\n * @author Sasha Koss [@kossnocorp](https://github.com/kossnocorp)\n * @author Lesha Koss [@leshakoss](https://github.com/leshakoss)\n */\nexport const enUS = {\n  code: \"en-US\",\n  formatDistance: formatDistance,\n  formatLong: formatLong,\n  formatRelative: formatRelative,\n  localize: localize,\n  match: match,\n  options: {\n    weekStartsOn: 0 /* Sunday */,\n    firstWeekContainsDate: 1,\n  },\n};\n\n// Fallback for modularized imports:\nexport default enUS;\n","const formatDistanceLocale = {\n  lessThanXSeconds: {\n    one: \"less than a second\",\n    other: \"less than {{count}} seconds\",\n  },\n\n  xSeconds: {\n    one: \"1 second\",\n    other: \"{{count}} seconds\",\n  },\n\n  halfAMinute: \"half a minute\",\n\n  lessThanXMinutes: {\n    one: \"less than a minute\",\n    other: \"less than {{count}} minutes\",\n  },\n\n  xMinutes: {\n    one: \"1 minute\",\n    other: \"{{count}} minutes\",\n  },\n\n  aboutXHours: {\n    one: \"about 1 hour\",\n    other: \"about {{count}} hours\",\n  },\n\n  xHours: {\n    one: \"1 hour\",\n    other: \"{{count}} hours\",\n  },\n\n  xDays: {\n    one: \"1 day\",\n    other: \"{{count}} days\",\n  },\n\n  aboutXWeeks: {\n    one: \"about 1 week\",\n    other: \"about {{count}} weeks\",\n  },\n\n  xWeeks: {\n    one: \"1 week\",\n    other: \"{{count}} weeks\",\n  },\n\n  aboutXMonths: {\n    one: \"about 1 month\",\n    other: \"about {{count}} months\",\n  },\n\n  xMonths: {\n    one: \"1 month\",\n    other: \"{{count}} months\",\n  },\n\n  aboutXYears: {\n    one: \"about 1 year\",\n    other: \"about {{count}} years\",\n  },\n\n  xYears: {\n    one: \"1 year\",\n    other: \"{{count}} years\",\n  },\n\n  overXYears: {\n    one: \"over 1 year\",\n    other: \"over {{count}} years\",\n  },\n\n  almostXYears: {\n    one: \"almost 1 year\",\n    other: \"almost {{count}} years\",\n  },\n};\n\nexport const formatDistance = (token, count, options) => {\n  let result;\n\n  const tokenValue = formatDistanceLocale[token];\n  if (typeof tokenValue === \"string\") {\n    result = tokenValue;\n  } else if (count === 1) {\n    result = tokenValue.one;\n  } else {\n    result = tokenValue.other.replace(\"{{count}}\", count.toString());\n  }\n\n  if (options?.addSuffix) {\n    if (options.comparison && options.comparison > 0) {\n      return \"in \" + result;\n    } else {\n      return result + \" ago\";\n    }\n  }\n\n  return result;\n};\n","import { buildFormatLongFn } from \"../../_lib/buildFormatLongFn.js\";\n\nconst dateFormats = {\n  full: \"EEEE, MMMM do, y\",\n  long: \"MMMM do, y\",\n  medium: \"MMM d, y\",\n  short: \"MM/dd/yyyy\",\n};\n\nconst timeFormats = {\n  full: \"h:mm:ss a zzzz\",\n  long: \"h:mm:ss a z\",\n  medium: \"h:mm:ss a\",\n  short: \"h:mm a\",\n};\n\nconst dateTimeFormats = {\n  full: \"{{date}} 'at' {{time}}\",\n  long: \"{{date}} 'at' {{time}}\",\n  medium: \"{{date}}, {{time}}\",\n  short: \"{{date}}, {{time}}\",\n};\n\nexport const formatLong = {\n  date: buildFormatLongFn({\n    formats: dateFormats,\n    defaultWidth: \"full\",\n  }),\n\n  time: buildFormatLongFn({\n    formats: timeFormats,\n    defaultWidth: \"full\",\n  }),\n\n  dateTime: buildFormatLongFn({\n    formats: dateTimeFormats,\n    defaultWidth: \"full\",\n  }),\n};\n","export function buildFormatLongFn(args) {\n  return (options = {}) => {\n    // TODO: Remove String()\n    const width = options.width ? String(options.width) : args.defaultWidth;\n    const format = args.formats[width] || args.formats[args.defaultWidth];\n    return format;\n  };\n}\n","const formatRelativeLocale = {\n  lastWeek: \"'last' eeee 'at' p\",\n  yesterday: \"'yesterday at' p\",\n  today: \"'today at' p\",\n  tomorrow: \"'tomorrow at' p\",\n  nextWeek: \"eeee 'at' p\",\n  other: \"P\",\n};\n\nexport const formatRelative = (token, _date, _baseDate, _options) =>\n  formatRelativeLocale[token];\n","import { buildLocalizeFn } from \"../../_lib/buildLocalizeFn.js\";\n\nconst eraValues = {\n  narrow: [\"B\", \"A\"],\n  abbreviated: [\"BC\", \"AD\"],\n  wide: [\"Before Christ\", \"Anno Domini\"],\n};\n\nconst quarterValues = {\n  narrow: [\"1\", \"2\", \"3\", \"4\"],\n  abbreviated: [\"Q1\", \"Q2\", \"Q3\", \"Q4\"],\n  wide: [\"1st quarter\", \"2nd quarter\", \"3rd quarter\", \"4th quarter\"],\n};\n\n// Note: in English, the names of days of the week and months are capitalized.\n// If you are making a new locale based on this one, check if the same is true for the language you're working on.\n// Generally, formatted dates should look like they are in the middle of a sentence,\n// e.g. in Spanish language the weekdays and months should be in the lowercase.\nconst monthValues = {\n  narrow: [\"J\", \"F\", \"M\", \"A\", \"M\", \"J\", \"J\", \"A\", \"S\", \"O\", \"N\", \"D\"],\n  abbreviated: [\n    \"Jan\",\n    \"Feb\",\n    \"Mar\",\n    \"Apr\",\n    \"May\",\n    \"Jun\",\n    \"Jul\",\n    \"Aug\",\n    \"Sep\",\n    \"Oct\",\n    \"Nov\",\n    \"Dec\",\n  ],\n\n  wide: [\n    \"January\",\n    \"February\",\n    \"March\",\n    \"April\",\n    \"May\",\n    \"June\",\n    \"July\",\n    \"August\",\n    \"September\",\n    \"October\",\n    \"November\",\n    \"December\",\n  ],\n};\n\nconst dayValues = {\n  narrow: [\"S\", \"M\", \"T\", \"W\", \"T\", \"F\", \"S\"],\n  short: [\"Su\", \"Mo\", \"Tu\", \"We\", \"Th\", \"Fr\", \"Sa\"],\n  abbreviated: [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"],\n  wide: [\n    \"Sunday\",\n    \"Monday\",\n    \"Tuesday\",\n    \"Wednesday\",\n    \"Thursday\",\n    \"Friday\",\n    \"Saturday\",\n  ],\n};\n\nconst dayPeriodValues = {\n  narrow: {\n    am: \"a\",\n    pm: \"p\",\n    midnight: \"mi\",\n    noon: \"n\",\n    morning: \"morning\",\n    afternoon: \"afternoon\",\n    evening: \"evening\",\n    night: \"night\",\n  },\n  abbreviated: {\n    am: \"AM\",\n    pm: \"PM\",\n    midnight: \"midnight\",\n    noon: \"noon\",\n    morning: \"morning\",\n    afternoon: \"afternoon\",\n    evening: \"evening\",\n    night: \"night\",\n  },\n  wide: {\n    am: \"a.m.\",\n    pm: \"p.m.\",\n    midnight: \"midnight\",\n    noon: \"noon\",\n    morning: \"morning\",\n    afternoon: \"afternoon\",\n    evening: \"evening\",\n    night: \"night\",\n  },\n};\n\nconst formattingDayPeriodValues = {\n  narrow: {\n    am: \"a\",\n    pm: \"p\",\n    midnight: \"mi\",\n    noon: \"n\",\n    morning: \"in the morning\",\n    afternoon: \"in the afternoon\",\n    evening: \"in the evening\",\n    night: \"at night\",\n  },\n  abbreviated: {\n    am: \"AM\",\n    pm: \"PM\",\n    midnight: \"midnight\",\n    noon: \"noon\",\n    morning: \"in the morning\",\n    afternoon: \"in the afternoon\",\n    evening: \"in the evening\",\n    night: \"at night\",\n  },\n  wide: {\n    am: \"a.m.\",\n    pm: \"p.m.\",\n    midnight: \"midnight\",\n    noon: \"noon\",\n    morning: \"in the morning\",\n    afternoon: \"in the afternoon\",\n    evening: \"in the evening\",\n    night: \"at night\",\n  },\n};\n\nconst ordinalNumber = (dirtyNumber, _options) => {\n  const number = Number(dirtyNumber);\n\n  // If ordinal numbers depend on context, for example,\n  // if they are different for different grammatical genders,\n  // use `options.unit`.\n  //\n  // `unit` can be 'year', 'quarter', 'month', 'week', 'date', 'dayOfYear',\n  // 'day', 'hour', 'minute', 'second'.\n\n  const rem100 = number % 100;\n  if (rem100 > 20 || rem100 < 10) {\n    switch (rem100 % 10) {\n      case 1:\n        return number + \"st\";\n      case 2:\n        return number + \"nd\";\n      case 3:\n        return number + \"rd\";\n    }\n  }\n  return number + \"th\";\n};\n\nexport const localize = {\n  ordinalNumber,\n\n  era: buildLocalizeFn({\n    values: eraValues,\n    defaultWidth: \"wide\",\n  }),\n\n  quarter: buildLocalizeFn({\n    values: quarterValues,\n    defaultWidth: \"wide\",\n    argumentCallback: (quarter) => quarter - 1,\n  }),\n\n  month: buildLocalizeFn({\n    values: monthValues,\n    defaultWidth: \"wide\",\n  }),\n\n  day: buildLocalizeFn({\n    values: dayValues,\n    defaultWidth: \"wide\",\n  }),\n\n  dayPeriod: buildLocalizeFn({\n    values: dayPeriodValues,\n    defaultWidth: \"wide\",\n    formattingValues: formattingDayPeriodValues,\n    defaultFormattingWidth: \"wide\",\n  }),\n};\n","/**\n * The localize function argument callback which allows to convert raw value to\n * the actual type.\n *\n * @param value - The value to convert\n *\n * @returns The converted value\n */\n\n/**\n * The map of localized values for each width.\n */\n\n/**\n * The index type of the locale unit value. It types conversion of units of\n * values that don't start at 0 (i.e. quarters).\n */\n\n/**\n * Converts the unit value to the tuple of values.\n */\n\n/**\n * The tuple of localized era values. The first element represents BC,\n * the second element represents AD.\n */\n\n/**\n * The tuple of localized quarter values. The first element represents Q1.\n */\n\n/**\n * The tuple of localized day values. The first element represents Sunday.\n */\n\n/**\n * The tuple of localized month values. The first element represents January.\n */\n\nexport function buildLocalizeFn(args) {\n  return (value, options) => {\n    const context = options?.context ? String(options.context) : \"standalone\";\n\n    let valuesArray;\n    if (context === \"formatting\" && args.formattingValues) {\n      const defaultWidth = args.defaultFormattingWidth || args.defaultWidth;\n      const width = options?.width ? String(options.width) : defaultWidth;\n\n      valuesArray =\n        args.formattingValues[width] || args.formattingValues[defaultWidth];\n    } else {\n      const defaultWidth = args.defaultWidth;\n      const width = options?.width ? String(options.width) : args.defaultWidth;\n\n      valuesArray = args.values[width] || args.values[defaultWidth];\n    }\n    const index = args.argumentCallback ? args.argumentCallback(value) : value;\n\n    // @ts-expect-error - For some reason TypeScript just don't want to match it, no matter how hard we try. I challenge you to try to remove it!\n    return valuesArray[index];\n  };\n}\n","import { buildMatchFn } from \"../../_lib/buildMatchFn.js\";\nimport { buildMatchPatternFn } from \"../../_lib/buildMatchPatternFn.js\";\n\nconst matchOrdinalNumberPattern = /^(\\d+)(th|st|nd|rd)?/i;\nconst parseOrdinalNumberPattern = /\\d+/i;\n\nconst matchEraPatterns = {\n  narrow: /^(b|a)/i,\n  abbreviated: /^(b\\.?\\s?c\\.?|b\\.?\\s?c\\.?\\s?e\\.?|a\\.?\\s?d\\.?|c\\.?\\s?e\\.?)/i,\n  wide: /^(before christ|before common era|anno domini|common era)/i,\n};\nconst parseEraPatterns = {\n  any: [/^b/i, /^(a|c)/i],\n};\n\nconst matchQuarterPatterns = {\n  narrow: /^[1234]/i,\n  abbreviated: /^q[1234]/i,\n  wide: /^[1234](th|st|nd|rd)? quarter/i,\n};\nconst parseQuarterPatterns = {\n  any: [/1/i, /2/i, /3/i, /4/i],\n};\n\nconst matchMonthPatterns = {\n  narrow: /^[jfmasond]/i,\n  abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,\n  wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i,\n};\nconst parseMonthPatterns = {\n  narrow: [\n    /^j/i,\n    /^f/i,\n    /^m/i,\n    /^a/i,\n    /^m/i,\n    /^j/i,\n    /^j/i,\n    /^a/i,\n    /^s/i,\n    /^o/i,\n    /^n/i,\n    /^d/i,\n  ],\n\n  any: [\n    /^ja/i,\n    /^f/i,\n    /^mar/i,\n    /^ap/i,\n    /^may/i,\n    /^jun/i,\n    /^jul/i,\n    /^au/i,\n    /^s/i,\n    /^o/i,\n    /^n/i,\n    /^d/i,\n  ],\n};\n\nconst matchDayPatterns = {\n  narrow: /^[smtwf]/i,\n  short: /^(su|mo|tu|we|th|fr|sa)/i,\n  abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,\n  wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i,\n};\nconst parseDayPatterns = {\n  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],\n  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i],\n};\n\nconst matchDayPeriodPatterns = {\n  narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,\n  any: /^([ap]\\.?\\s?m\\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i,\n};\nconst parseDayPeriodPatterns = {\n  any: {\n    am: /^a/i,\n    pm: /^p/i,\n    midnight: /^mi/i,\n    noon: /^no/i,\n    morning: /morning/i,\n    afternoon: /afternoon/i,\n    evening: /evening/i,\n    night: /night/i,\n  },\n};\n\nexport const match = {\n  ordinalNumber: buildMatchPatternFn({\n    matchPattern: matchOrdinalNumberPattern,\n    parsePattern: parseOrdinalNumberPattern,\n    valueCallback: (value) => parseInt(value, 10),\n  }),\n\n  era: buildMatchFn({\n    matchPatterns: matchEraPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseEraPatterns,\n    defaultParseWidth: \"any\",\n  }),\n\n  quarter: buildMatchFn({\n    matchPatterns: matchQuarterPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseQuarterPatterns,\n    defaultParseWidth: \"any\",\n    valueCallback: (index) => index + 1,\n  }),\n\n  month: buildMatchFn({\n    matchPatterns: matchMonthPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseMonthPatterns,\n    defaultParseWidth: \"any\",\n  }),\n\n  day: buildMatchFn({\n    matchPatterns: matchDayPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseDayPatterns,\n    defaultParseWidth: \"any\",\n  }),\n\n  dayPeriod: buildMatchFn({\n    matchPatterns: matchDayPeriodPatterns,\n    defaultMatchWidth: \"any\",\n    parsePatterns: parseDayPeriodPatterns,\n    defaultParseWidth: \"any\",\n  }),\n};\n","export function buildMatchFn(args) {\n  return (string, options = {}) => {\n    const width = options.width;\n\n    const matchPattern =\n      (width && args.matchPatterns[width]) ||\n      args.matchPatterns[args.defaultMatchWidth];\n    const matchResult = string.match(matchPattern);\n\n    if (!matchResult) {\n      return null;\n    }\n    const matchedString = matchResult[0];\n\n    const parsePatterns =\n      (width && args.parsePatterns[width]) ||\n      args.parsePatterns[args.defaultParseWidth];\n\n    const key = Array.isArray(parsePatterns)\n      ? findIndex(parsePatterns, (pattern) => pattern.test(matchedString))\n      : // [TODO] -- I challenge you to fix the type\n        findKey(parsePatterns, (pattern) => pattern.test(matchedString));\n\n    let value;\n\n    value = args.valueCallback ? args.valueCallback(key) : key;\n    value = options.valueCallback\n      ? // [TODO] -- I challenge you to fix the type\n        options.valueCallback(value)\n      : value;\n\n    const rest = string.slice(matchedString.length);\n\n    return { value, rest };\n  };\n}\n\nfunction findKey(object, predicate) {\n  for (const key in object) {\n    if (\n      Object.prototype.hasOwnProperty.call(object, key) &&\n      predicate(object[key])\n    ) {\n      return key;\n    }\n  }\n  return undefined;\n}\n\nfunction findIndex(array, predicate) {\n  for (let key = 0; key < array.length; key++) {\n    if (predicate(array[key])) {\n      return key;\n    }\n  }\n  return undefined;\n}\n","export function buildMatchPatternFn(args) {\n  return (string, options = {}) => {\n    const matchResult = string.match(args.matchPattern);\n    if (!matchResult) return null;\n    const matchedString = matchResult[0];\n\n    const parseResult = string.match(args.parsePattern);\n    if (!parseResult) return null;\n    let value = args.valueCallback\n      ? args.valueCallback(parseResult[0])\n      : parseResult[0];\n\n    // [TODO] I challenge you to fix the type\n    value = options.valueCallback ? options.valueCallback(value) : value;\n\n    const rest = string.slice(matchedString.length);\n\n    return { value, rest };\n  };\n}\n","let defaultOptions = {};\n\nexport function getDefaultOptions() {\n  return defaultOptions;\n}\n\nexport function setDefaultOptions(newOptions) {\n  defaultOptions = newOptions;\n}\n","import { toDate } from \"../toDate.js\";\n\n/**\n * Google Chrome as of 67.0.3396.87 introduced timezones with offset that includes seconds.\n * They usually appear for dates that denote time before the timezones were introduced\n * (e.g. for 'Europe/Prague' timezone the offset is GMT+00:57:44 before 1 October 1891\n * and GMT+01:00:00 after that date)\n *\n * Date#getTimezoneOffset returns the offset in minutes and would return 57 for the example above,\n * which would lead to incorrect calculations.\n *\n * This function returns the timezone offset in milliseconds that takes seconds in account.\n */\nexport function getTimezoneOffsetInMilliseconds(date) {\n  const _date = toDate(date);\n  const utcDate = new Date(\n    Date.UTC(\n      _date.getFullYear(),\n      _date.getMonth(),\n      _date.getDate(),\n      _date.getHours(),\n      _date.getMinutes(),\n      _date.getSeconds(),\n      _date.getMilliseconds(),\n    ),\n  );\n  utcDate.setUTCFullYear(_date.getFullYear());\n  return +date - +utcDate;\n}\n","import { constructFrom } from \"./constructFrom.js\";\n\n/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * Starting from v3.7.0, it clones a date using `[Symbol.for(\"constructDateFrom\")]`\n * enabling to transfer extra properties from the reference date to the new date.\n * It's useful for extensions like [`TZDate`](https://github.com/date-fns/tz)\n * that accept a time zone as a constructor argument.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param argument - The value to convert\n *\n * @returns The parsed date in the local time zone\n *\n * @example\n * // Clone the date:\n * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert the timestamp to date:\n * const result = toDate(1392098430000)\n * //=> Tue Feb 11 2014 11:30:30\n */\nexport function toDate(argument, context) {\n  // [TODO] Get rid of `toDate` or `constructFrom`?\n  return constructFrom(context || argument, argument);\n}\n\n// Fallback for modularized imports:\nexport default toDate;\n","import { constructFrom } from \"../constructFrom.js\";\n\nexport function normalizeDates(context, ...dates) {\n  const normalize = constructFrom.bind(\n    null,\n    context || dates.find((date) => typeof date === \"object\"),\n  );\n  return dates.map(normalize);\n}\n","import { toDate } from \"./toDate.js\";\n\n/**\n * @name compareAsc\n * @category Common Helpers\n * @summary Compare the two dates and return -1, 0 or 1.\n *\n * @description\n * Compare the two dates and return 1 if the first date is after the second,\n * -1 if the first date is before the second or 0 if dates are equal.\n *\n * @param dateLeft - The first date to compare\n * @param dateRight - The second date to compare\n *\n * @returns The result of the comparison\n *\n * @example\n * // Compare 11 February 1987 and 10 July 1989:\n * const result = compareAsc(new Date(1987, 1, 11), new Date(1989, 6, 10))\n * //=> -1\n *\n * @example\n * // Sort the array of dates:\n * const result = [\n *   new Date(1995, 6, 2),\n *   new Date(1987, 1, 11),\n *   new Date(1989, 6, 10)\n * ].sort(compareAsc)\n * //=> [\n * //   Wed Feb 11 1987 00:00:00,\n * //   Mon Jul 10 1989 00:00:00,\n * //   Sun Jul 02 1995 00:00:00\n * // ]\n */\nexport function compareAsc(dateLeft, dateRight) {\n  const diff = +toDate(dateLeft) - +toDate(dateRight);\n\n  if (diff < 0) return -1;\n  else if (diff > 0) return 1;\n\n  // Return 0 if diff is 0; return NaN if diff is NaN\n  return diff;\n}\n\n// Fallback for modularized imports:\nexport default compareAsc;\n","import { normalizeDates } from \"./_lib/normalizeDates.js\";\nimport { compareAsc } from \"./compareAsc.js\";\nimport { differenceInCalendarMonths } from \"./differenceInCalendarMonths.js\";\nimport { isLastDayOfMonth } from \"./isLastDayOfMonth.js\";\n\n/**\n * The {@link differenceInMonths} function options.\n */\n\n/**\n * @name differenceInMonths\n * @category Month Helpers\n * @summary Get the number of full months between the given dates.\n *\n * @param laterDate - The later date\n * @param earlierDate - The earlier date\n * @param options - An object with options\n *\n * @returns The number of full months\n *\n * @example\n * // How many full months are between 31 January 2014 and 1 September 2014?\n * const result = differenceInMonths(new Date(2014, 8, 1), new Date(2014, 0, 31))\n * //=> 7\n */\nexport function differenceInMonths(laterDate, earlierDate, options) {\n  const [laterDate_, workingLaterDate, earlierDate_] = normalizeDates(\n    options?.in,\n    laterDate,\n    laterDate,\n    earlierDate,\n  );\n\n  const sign = compareAsc(workingLaterDate, earlierDate_);\n  const difference = Math.abs(\n    differenceInCalendarMonths(workingLaterDate, earlierDate_),\n  );\n\n  if (difference < 1) return 0;\n\n  if (workingLaterDate.getMonth() === 1 && workingLaterDate.getDate() > 27)\n    workingLaterDate.setDate(30);\n\n  workingLaterDate.setMonth(workingLaterDate.getMonth() - sign * difference);\n\n  let isLastMonthNotFull = compareAsc(workingLaterDate, earlierDate_) === -sign;\n\n  if (\n    isLastDayOfMonth(laterDate_) &&\n    difference === 1 &&\n    compareAsc(laterDate_, earlierDate_) === 1\n  ) {\n    isLastMonthNotFull = false;\n  }\n\n  const result = sign * (difference - +isLastMonthNotFull);\n  return result === 0 ? 0 : result;\n}\n\n// Fallback for modularized imports:\nexport default differenceInMonths;\n","import { normalizeDates } from \"./_lib/normalizeDates.js\";\n\n/**\n * The {@link differenceInCalendarMonths} function options.\n */\n\n/**\n * @name differenceInCalendarMonths\n * @category Month Helpers\n * @summary Get the number of calendar months between the given dates.\n *\n * @description\n * Get the number of calendar months between the given dates.\n *\n * @param laterDate - The later date\n * @param earlierDate - The earlier date\n * @param options - An object with options\n *\n * @returns The number of calendar months\n *\n * @example\n * // How many calendar months are between 31 January 2014 and 1 September 2014?\n * const result = differenceInCalendarMonths(\n *   new Date(2014, 8, 1),\n *   new Date(2014, 0, 31)\n * )\n * //=> 8\n */\nexport function differenceInCalendarMonths(laterDate, earlierDate, options) {\n  const [laterDate_, earlierDate_] = normalizeDates(\n    options?.in,\n    laterDate,\n    earlierDate,\n  );\n\n  const yearsDiff = laterDate_.getFullYear() - earlierDate_.getFullYear();\n  const monthsDiff = laterDate_.getMonth() - earlierDate_.getMonth();\n\n  return yearsDiff * 12 + monthsDiff;\n}\n\n// Fallback for modularized imports:\nexport default differenceInCalendarMonths;\n","import { endOfDay } from \"./endOfDay.js\";\nimport { endOfMonth } from \"./endOfMonth.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * @name isLastDayOfMonth\n * @category Month Helpers\n * @summary Is the given date the last day of a month?\n *\n * @description\n * Is the given date the last day of a month?\n *\n * @param date - The date to check\n * @param options - An object with options\n *\n * @returns The date is the last day of a month\n *\n * @example\n * // Is 28 February 2014 the last day of a month?\n * const result = isLastDayOfMonth(new Date(2014, 1, 28))\n * //=> true\n */\nexport function isLastDayOfMonth(date, options) {\n  const _date = toDate(date, options?.in);\n  return +endOfDay(_date, options) === +endOfMonth(_date, options);\n}\n\n// Fallback for modularized imports:\nexport default isLastDayOfMonth;\n","import { toDate } from \"./toDate.js\";\n\n/**\n * The {@link endOfDay} function options.\n */\n\n/**\n * @name endOfDay\n * @category Day Helpers\n * @summary Return the end of a day for the given date.\n *\n * @description\n * Return the end of a day for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The original date\n * @param options - An object with options\n *\n * @returns The end of a day\n *\n * @example\n * // The end of a day for 2 September 2014 11:55:00:\n * const result = endOfDay(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 02 2014 23:59:59.999\n */\nexport function endOfDay(date, options) {\n  const _date = toDate(date, options?.in);\n  _date.setHours(23, 59, 59, 999);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default endOfDay;\n","import { toDate } from \"./toDate.js\";\n\n/**\n * The {@link endOfMonth} function options.\n */\n\n/**\n * @name endOfMonth\n * @category Month Helpers\n * @summary Return the end of a month for the given date.\n *\n * @description\n * Return the end of a month for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The original date\n * @param options - An object with options\n *\n * @returns The end of a month\n *\n * @example\n * // The end of a month for 2 September 2014 11:55:00:\n * const result = endOfMonth(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 30 2014 23:59:59.999\n */\nexport function endOfMonth(date, options) {\n  const _date = toDate(date, options?.in);\n  const month = _date.getMonth();\n  _date.setFullYear(_date.getFullYear(), month + 1, 0);\n  _date.setHours(23, 59, 59, 999);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default endOfMonth;\n","import { getRoundingMethod } from \"./_lib/getRoundingMethod.js\";\nimport { differenceInMilliseconds } from \"./differenceInMilliseconds.js\";\n\n/**\n * The {@link differenceInSeconds} function options.\n */\n\n/**\n * @name differenceInSeconds\n * @category Second Helpers\n * @summary Get the number of seconds between the given dates.\n *\n * @description\n * Get the number of seconds between the given dates.\n *\n * @param laterDate - The later date\n * @param earlierDate - The earlier date\n * @param options - An object with options.\n *\n * @returns The number of seconds\n *\n * @example\n * // How many seconds are between\n * // 2 July 2014 12:30:07.999 and 2 July 2014 12:30:20.000?\n * const result = differenceInSeconds(\n *   new Date(2014, 6, 2, 12, 30, 20, 0),\n *   new Date(2014, 6, 2, 12, 30, 7, 999)\n * )\n * //=> 12\n */\nexport function differenceInSeconds(laterDate, earlierDate, options) {\n  const diff = differenceInMilliseconds(laterDate, earlierDate) / 1000;\n  return getRoundingMethod(options?.roundingMethod)(diff);\n}\n\n// Fallback for modularized imports:\nexport default differenceInSeconds;\n","export function getRoundingMethod(method) {\n  return (number) => {\n    const round = method ? Math[method] : Math.trunc;\n    const result = round(number);\n    // Prevent negative zero\n    return result === 0 ? 0 : result;\n  };\n}\n","import { toDate } from \"./toDate.js\";\n\n/**\n * @name differenceInMilliseconds\n * @category Millisecond Helpers\n * @summary Get the number of milliseconds between the given dates.\n *\n * @description\n * Get the number of milliseconds between the given dates.\n *\n * @param laterDate - The later date\n * @param earlierDate - The earlier date\n *\n * @returns The number of milliseconds\n *\n * @example\n * // How many milliseconds are between\n * // 2 July 2014 12:30:20.600 and 2 July 2014 12:30:21.700?\n * const result = differenceInMilliseconds(\n *   new Date(2014, 6, 2, 12, 30, 21, 700),\n *   new Date(2014, 6, 2, 12, 30, 20, 600)\n * )\n * //=> 1100\n */\nexport function differenceInMilliseconds(laterDate, earlierDate) {\n  return +toDate(laterDate) - +toDate(earlierDate);\n}\n\n// Fallback for modularized imports:\nexport default differenceInMilliseconds;\n"],"names":["args","date","$8540a44f59a4af84$export$2a7b97929c48d47d","Symbol","for","$abb9adbdb26342b3$export$ead8a1812b171991","value","Date","constructor","$0bc92389da5ca8f2$var$formatDistanceLocale","lessThanXSeconds","one","other","xSeconds","halfAMinute","lessThanXMinutes","xMinutes","aboutXHours","xHours","xDays","aboutXWeeks","xWeeks","aboutXMonths","xMonths","aboutXYears","xYears","overXYears","almostXYears","$46af55383084911e$export$38e44e97ce4dbb7d","options","width","String","defaultWidth","formats","$63c01f9040a729a9$export$cbf60ecb96cbb82f","full","long","medium","short","time","dateTime","$f529b3bee3f6d835$var$formatRelativeLocale","lastWeek","yesterday","today","tomorrow","nextWeek","$39a1e2b6239b09b3$export$63596d6ee8878b25","valuesArray","context","formattingValues","defaultFormattingWidth","values","argumentCallback","$e4df69a5a2d494a3$export$1430a0f35710914d","string","matchPattern","matchPatterns","defaultMatchWidth","matchResult","match","matchedString","parsePatterns","defaultParseWidth","key","Array","isArray","$e4df69a5a2d494a3$var$findIndex","array","predicate","length","pattern","test","$e4df69a5a2d494a3$var$findKey","object","Object","prototype","hasOwnProperty","call","valueCallback","rest","slice","$cd0c27002eb93234$export$137380d9ce54f7f","code","formatDistance","token","count","result","tokenValue","replace","toString","addSuffix","comparison","formatLong","formatRelative","_date","_baseDate","_options","localize","ordinalNumber","dirtyNumber","number","Number","rem100","era","narrow","abbreviated","wide","quarter","month","day","dayPeriod","am","pm","midnight","noon","morning","afternoon","evening","night","parsePattern","parseInt","parseResult","any","index","weekStartsOn","firstWeekContainsDate","$39440020b58e1ef8$var$defaultOptions","$231bfb8d72679740$export$e67a095c620b86fe","argument","$92dc0740ffabe180$export$113002b5eff6e430","utcDate","UTC","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","getMilliseconds","setUTCFullYear","$002c8181c95d5119$export$9f53b88e82f64d8d","dates","normalize","bind","find","map","$e9cff913190bd013$export$fe114145ae75d197","dateLeft","dateRight","diff","document","body","textContent","laterDate","earlierDate","method","months","locale","defaultOptions","isNaN","RangeError","localizeOptions","assign","laterDate_","earlierDate_","in","seconds","round","Math","trunc","minutes","includeSeconds","hours","days","workingLaterDate","sign","difference","abs","yearsDiff","setDate","setMonth","isLastMonthNotFull","setHours","setFullYear","nearestMonth","monthsSinceStartOfYear","years","now"],"version":3,"file":"index.b56130fd.js.map"}